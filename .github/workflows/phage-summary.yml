name: Phage/Virome Summary

on:
  workflow_dispatch:
    inputs:
      mode:
        description: "How to provide data"
        required: true
        type: choice
        default: search
        options: [search, accessions, local_only]
      query:
        description: "NCBI search query (if mode=search)"
        required: false
        default: bacteriophage complete genome[Title] AND srcdb_refseq[PROP] AND biomol_genomic[PROP] AND 10000:100000[SLEN]
      max_hits:
        description: "Max hits for search (mode=search)"
        required: false
        default: "10"
      accessions:
        description: "Space-separated list (mode=accessions)"
        required: false
        default: "NC_001416"
      save_dir:
        description: "Cache/download folder"
        required: true
        default: "bank"
      filter_to_phage:
        description: "Filter to phage/virome"
        required: true
        type: choice
        default: "true"
        options: ["true", "false"]

jobs:
  summarize:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install biopython

      - name: Run summary
        id: run_summary
        env:
          ENTREZ_EMAIL: ${{ secrets.ENTREZ_EMAIL }}
          NCBI_API_KEY: ${{ secrets.NCBI_API_KEY }}
        shell: bash
        continue-on-error: true
        run: |
          set -euo pipefail
          set -f  # keep [Title]/[SLEN]/[PROP] from globbing
          mkdir -p "${{ inputs.save_dir }}"

          CSV_OUT="summary.csv"
          JSON_OUT="summary.json"
          HYPO_OUT="hypotheticals.txt"

          CMD=( python parse_genbank_phage_virome_fetch_cached.py
                --save-dir "./${{ inputs.save_dir }}"
                --csv "$CSV_OUT"
                --json "$JSON_OUT"
                --list-hypo "$HYPO_OUT" )

          if [[ "${{ inputs.filter_to_phage }}" == "false" ]]; then
            CMD+=( --no-filter )
          fi
          [[ -n "${ENTREZ_EMAIL:-}" ]] && CMD+=( --entrez-email "$ENTREZ_EMAIL" )
          [[ -n "${NCBI_API_KEY:-}" ]] && CMD+=( --api-key "$NCBI_API_KEY" )

          case "${{ inputs.mode }}" in
            search)
              QUERY='${{ inputs.query }}'
              MAX_HITS='${{ inputs.max_hits }}'
              CMD+=( --search "$QUERY" --max-hits "$MAX_HITS" )
              ;;
            accessions)
              read -r -a ACCS <<< '${{ inputs.accessions }}'
              CMD+=( --acc "${ACCS[@]}" )
              ;;
            local_only)
              shopt -s nullglob
              FILES=( *.gb *.gbk *.genbank )
              (( ${#FILES[@]} )) && CMD+=( "${FILES[@]}" ) || echo "No local GBK files found."
              ;;
          esac

          echo "Running: ${CMD[*]}"
          if "${CMD[@]}"; then echo "status=0" >> $GITHUB_OUTPUT; else echo "status=$?" >> $GITHUB_OUTPUT; fi

      - name: Rename UID .gbk files to accessions (post-search tidy)
        if: ${{ always() && inputs.mode == 'search' }}
        shell: bash
        run: |
          python - << 'PY'
          import os, glob
          from Bio import SeqIO
          bank_dir = "${{ inputs.save_dir }}"
          os.makedirs(bank_dir, exist_ok=True)
          for path in glob.glob(os.path.join(bank_dir, "*.gbk")):
            try:
              rec = next(SeqIO.parse(path, "genbank"))
            except Exception:
              continue
            acc = (rec.id.split('.')[0] if rec.id else "") or rec.name
            if not acc: continue
            new = os.path.join(bank_dir, f"{acc}.gbk")
            if os.path.abspath(new) != os.path.abspath(path) and not os.path.exists(new):
              os.rename(path, new)
          PY

      - name: Preview CSV in job summary
        if: always()
        shell: bash
        run: |
          {
            echo "## Phage/Virome Summary"
            echo
            echo "**Mode:** ${{ inputs.mode }}  "
            if [[ "${{ inputs.mode }}" == "search" ]]; then
              echo "**Query:** \`${{ inputs.query }}\`  "
              echo "**Max hits:** ${{ inputs.max_hits }}  "
            elif [[ "${{ inputs.mode }}" == "accessions" ]]; then
              echo "**Accessions:** \`${{ inputs.accessions }}\`  "
            else
              echo "**Local files mode**  "
            fi
            echo "**Parser exit code:** \`${{ steps.run_summary.outputs.status || 'unknown' }}\`  "
            echo
            if [[ -f summary.csv ]]; then
              echo "### First rows of \`summary.csv\`"
              echo
              echo '```'
              head -n 20 summary.csv
              echo '```'
            else
              echo "_No summary.csv produced_"
            fi
          } >> "$GITHUB_STEP_SUMMARY"

      - name: Debug: list workspace
        if: always()
        shell: bash
        run: |
          echo "---- ls -lah ----"; ls -lah
          echo "---- bank/ ----"; ls -lah "${{ inputs.save_dir }}" || true

      - name: Upload artifacts (unique per run)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: phage-summary-${{ github.run_number }}
          path: |
            summary.csv
            summary.json
            hypotheticals.txt
            ${{ inputs.save_dir }}/
          if-no-files-found: warn
          retention-days: 7
